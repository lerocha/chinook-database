<#@ template hostspecific="True"#>
<#@ output extension="cs" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ include file="..\..\ChinookDatabase\_T4Templates\Chinook.ttinclude" #>
<#@ include file="..\..\ChinookDatabase\_T4Templates\Manager.ttinclude" #>
<#
var options = new [] {
						new Option
						{
							Strategy = new SqlServerStrategy(),
							ConnectionClass = "SqlConnection",
							AdapterClass = "SqlDataAdapter",
							Namespace = "System.Data.SqlClient",
							ConnectionNames = new[] {"Chinook_SqlServer", "Chinook_SqlServer_AutoIncrement"}
						},
						new Option 
						{
							Strategy = new SqlServerCompactStrategy(),
							ConnectionClass = "SqlCeConnection",
							AdapterClass = "SqlCeDataAdapter",
							Namespace = "System.Data.SqlServerCe",
							ConnectionNames = new[] {"Chinook_SqlServerCompact", "Chinook_SqlServerCompact_AutoIncrement"}
						},
						new Option 
						{
							Strategy = new MySqlStrategy(),
							ConnectionClass = "MySqlConnection",
							AdapterClass = "MySqlDataAdapter",
							Namespace = "MySql.Data.MySqlClient",
							ConnectionNames = new[] {"Chinook_MySql", "Chinook_MySql_AutoIncrement"}
						},
						new Option 
						{
							Strategy = new SqliteStrategy(),
							ConnectionClass = "SQLiteConnection",
							AdapterClass = "SQLiteDataAdapter",
							Namespace = "System.Data.SQLite",
							ConnectionNames = new[] {"Chinook_Sqlite", "Chinook_Sqlite_AutoIncrement"}
						},
						new Option 
						{
							Strategy = new OracleStrategy(),
							ConnectionClass = "OracleConnection",
							AdapterClass = "OracleDataAdapter",
							Namespace = "Oracle.ManagedDataAccess.Client",
							ConnectionNames = new[] {"Chinook_Oracle"}
						},
						new Option 
						{
							Strategy = new PostgreSqlStrategy(),
							ConnectionClass = "NpgsqlConnection",
							AdapterClass = "NpgsqlDataAdapter",
							Namespace = "Npgsql",
							ConnectionNames = new[] {"Chinook_PostgreSql"}
						},
						new Option 
						{
							Strategy = new Db2Strategy(),
							ConnectionClass = "DB2Connection",
							AdapterClass = "DB2DataAdapter",
							Namespace = "IBM.Data.DB2.Core",
							ConnectionNames = new[] {"Chinook_Db2"}
						}
					};

var fileManager = Manager.Create(Host, GenerationEnvironment);
foreach (Option option in options)
{
	var connectionValues = option.GetConnectionValues();
	var filename = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), option.GetClassName() + ".cs");
	fileManager.StartNewFile(filename);
	
#>/*******************************************************************************
 * Chinook Database - Version <#= DataSetHelper.GetVersionNumber() #>
 * Description: Test fixture for Chinook database.
 * DB Server: <#= option.Strategy.Name #>
 * Author: Luis Rocha
 * License: https://github.com/lerocha/chinook-database/blob/master/LICENSE.md
 * 
 * IMPORTANT: In order to run these test fixtures, you will need to:
 *            1. Run the generated SQL script to create the database to be tested.
 *            2. Verify that app.config has the proper connection string (user/password).
 ********************************************************************************/
using System.Data;
using Xunit;
using <#= option.Namespace #>;
using Microsoft.Extensions.Configuration;

<#
    FileInfo thisFile = new FileInfo(Host.TemplateFile);
    var json = File.ReadAllText(thisFile.DirectoryName + @"\..\..\ChinookDatabase\DataSources\ChinookData.json");
    var ds = JsonConvert.DeserializeObject<ChinookDataSet>(json);
#>
namespace ChinookDatabase.Test.DatabaseTests
{
    /// <summary>
    /// Test fixtures for <#= option.Strategy.Name #> databases.
    /// </summary>
    public partial class <#= option.GetClassName() #> : IDisposable
    {
        protected IDictionary<string, <#= option.ConnectionClass #>> Connections;

        /// <summary>
        /// Retrieves the cached connection object.
        /// </summary>
        /// <param name="connectionName">Connection name in the configuration file.</param>
        /// <returns>A connection object for this specific database.</returns>
        protected <#= option.ConnectionClass #> GetConnection(string connectionName)
        {
            // Creates an ADO.NET connection to the database, if not created yet.
            if (Connections.ContainsKey(connectionName))
            {
                return Connections[connectionName];
            }

            var config = new ConfigurationBuilder().AddJsonFile("appsettings.test.json").Build();
            var connectionString = config.GetConnectionString(connectionName) ?? throw new ApplicationException("Cannot find connection string in appsettings.test.json");
            Connections[connectionName] = new <#= option.ConnectionClass #>(connectionString);
            return Connections[connectionName];
        }

        /// <summary>
        /// Method to execute a SQL query and return a dataset.
        /// </summary>
        /// <param name="connectionName">Connection name in the configuration file.</param>
        /// <param name="query">Query string to be executed.</param>
        /// <returns>DataSet with the query results.</returns>
        protected DataSet ExecuteQuery(string connectionName, string query)
        {
            var dataset = new DataSet();
			var connection = GetConnection(connectionName);

            // Verify if number of entities match number of records.
            using (var adapter = new <#= option.AdapterClass #>(query, connection))
            {
                adapter.Fill(dataset);
            }

            return dataset;
        }
        
        /// <summary>
        /// Initialize connections dictionary.
        /// </summary>
        public <#= option.GetClassName() #>()
        {
            Connections = new Dictionary<string, <#= option.ConnectionClass #>>();
        }

        /// <summary>
        /// Close all connections.
        /// </summary>
        public void Dispose()
        {
            foreach (var connection in Connections.Values)
            {
                connection.Close();
            }
        }

<# 
	var invoiceTable = ds.Invoice;
	if (invoiceTable != null)
    {
		var invoice = option.Strategy.GetFullyQualifiedName(invoiceTable.TableName);
		var invoiceId = option.Strategy.FormatName("InvoiceId");
		var invoiceLine = option.Strategy.GetFullyQualifiedName("InvoiceLine");
		var total = option.Strategy.FormatName("Total");
		var unitPrice = option.Strategy.FormatName("UnitPrice");
		var quantity = option.Strategy.FormatName("Quantity");
	
		var query1 = string.Format("SELECT count({0}) FROM {1} WHERE {0} NOT IN (SELECT {0} FROM {2} GROUP BY {0})", 
									invoiceId, invoice, invoiceLine).Replace("\"","\\\"");
		var query2 = string.Format("SELECT {0}.{1}, SUM({2}.{3} * {2}.{4}) AS CalculatedTotal, {0}.{5} AS Total FROM {2} INNER JOIN {0} ON {2}.{1} = {0}.{1} GROUP BY {0}.{1}, {0}.{5}",
									invoice, invoiceId, invoiceLine, unitPrice, quantity, total).Replace("\"","\\\"");

#>
        /// <summary>
        /// Asserts that all invoices contain invoice lines.
        /// </summary>
        [Theory]
<# foreach(var connectionName in option.ConnectionNames) {#>
		[InlineData("<#= connectionName #>")]
<# } #>
        public void AllInvoicesMustHaveInvoiceLines(string connectionName)
        {
            var dataSet = ExecuteQuery(connectionName, "<#= query1 #>");
            Assert.Equal("0", dataSet.Tables[0].Rows[0][0].ToString());
        }
        
        /// <summary>
        /// Asserts that invoice total matches sum of invoice lines.
        /// </summary>
        [Theory]
<# foreach(var connectionName in option.ConnectionNames) {#>
		[InlineData("<#= connectionName #>")]
<# } #>
        public void InvoiceTotalMustMatchSumOfInvoiceLines(string connectionName)
        {
            var dataSet = ExecuteQuery(connectionName, "<#= query2 #>");

            foreach (DataRow row in dataSet.Tables[0].Rows)
            {
                Assert.True(row["CalculatedTotal"].ToString() == row["Total"].ToString(), string.Format("The total field of InvoiceId={0} does not match its invoice lines.", row["InvoiceId"]));
            }
        }
<#
    }

    foreach (DataTable table in ds.Tables)
    {
		var fqTableName = option.Strategy.GetFullyQualifiedName(table.TableName).Replace("\"","\\\"");
		var keys = table.PrimaryKey.Cast<DataColumn>().Select(column => column.ColumnName);
		var fqPrimaryKeys = option.Strategy.GetColumns(keys, ',').Replace("\"","\\\"");
#>

        /// <summary>
        /// Verifies that the <#= table.TableName #> table was populated properly.
        /// </summary>
        [Theory]
<# foreach(var connectionName in option.ConnectionNames) {#>
		[InlineData("<#= connectionName #>")]
<# } #>
        public void <#= table.TableName #>TableShouldBePopulated(string connectionName)
        {
            var dataSet = ExecuteQuery(connectionName, "SELECT * FROM <#= fqTableName #>");
            Assert.Equal(<#= table.Rows.Count #>, dataSet.Tables[0].Rows.Count);
        }

        /// <summary>
        /// Verifies that last record of <#= table.TableName #> table has the proper information.
        /// </summary>
        [Theory]
<# foreach(var connectionName in option.ConnectionNames) {#>
		[InlineData("<#= connectionName #>")]
<# } #>
        public void <#= table.TableName #>LastRecordHasProperInfo(string connectionName)
        {
            var dataSet = ExecuteQuery(connectionName, "SELECT * FROM <#= fqTableName #> ORDER BY <#= fqPrimaryKeys #>");
            var table = dataSet.Tables[0];
            Assert.NotNull(table);
            var row = table.Rows[table.Rows.Count - 1];
            Assert.NotNull(row);

			// Assert that the last record has the proper information.            
<#
		int num = table.Rows.Count - 1;
		foreach (DataColumn col in table.Columns)
		{
			string expected = DataSetHelper.GetExpectedValue(col, table.Rows[num][col.ColumnName].ToString());
#>            Assert.Equal(<#= expected #>, row["<#= col.ColumnName #>"].ToString());
<#
		} // foreach column
#>        }
<#
    } // foreach table
#>

<#
	var customerTable = ds.Customer;
	if (customerTable != null)
    {
		var customer = option.Strategy.GetFullyQualifiedName(customerTable.TableName).Replace("\"","\\\"");
		var customerId = option.Strategy.FormatName("CustomerId").Replace("\"","\\\"");
	
		for (int i=0; i <= 10; i++)
		{
#>
        /// <summary>
        /// Verifies that the Unicode characters are populated properly.
        /// </summary>
        [Theory]
<# foreach(var connectionName in option.ConnectionNames) {#>
		[InlineData("<#= connectionName #>")]
<# } #>
        public void CustomerId<#= (i+1).ToString("D2") #>HasProperUnicodeCharacters(string connectionName)
        {
            var dataSet = ExecuteQuery(connectionName, "SELECT * FROM <#= customer #> WHERE <#= customerId #> = <#= i+1 #>");
            Assert.Equal(1, dataSet.Tables[0].Rows.Count); // Cannot find the Customer record that contains unicode characters. This record was not added to the Customer table or the SQL script did not use Unicode characters properly.
            var row = dataSet.Tables[0].Rows[0];
            
<#
			foreach (DataColumn col in ds.Tables["Customer"].Columns)
			{
				string expected = DataSetHelper.GetExpectedValue(col, ds.Tables["Customer"].Rows[i][col.ColumnName].ToString());
#>            Assert.Equal(<#= expected #>, row["<#= col.ColumnName #>"].ToString());
<#
			}
#>
		}
		
<#
	    } // foreach table
    }
#>
    }
	
}
<# 
	fileManager.EndBlock();
}

fileManager.Process(true);

#>
namespace ChinookDatabase.Test.DatabaseTests
{
    public class DatabaseFixture
    {
	}
}
<#+ 
	public class Option
	{
		public IDdlStrategy Strategy { get; set; }
		public string ConnectionClass { get; set; }
		public string AdapterClass { get; set; }
		public string Namespace { get; set; }
		public IList<string> ConnectionNames { get; set; }
		
		public string GetConnectionValues()
		{
			return GetValues(ConnectionNames, ',');
		}
		
		public string GetClassName()
		{
			return string.Format("Chinook{0}Fixture", Strategy.Name);
		}
	}
	
    private static string GetValues(IEnumerable<string> values, char delimiter)
    {
        var builder = new StringBuilder();
        foreach (var value in values)
        {
            builder.AppendFormat("\"{0}\"{1} ", value, delimiter);
        }
        return builder.ToString().Trim().TrimEnd(delimiter);
    }
	
#>